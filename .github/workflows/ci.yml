name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  push-docker-images:
    runs-on: ubuntu-latest
    env:
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Cache NPM dependencies
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      # Step 3: Log in to AWS ECR
      - name: Log in to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Build and tag Docker images
      - name: Build backend Docker image
        run: docker build -t backend-api ./api
      - name: Tag backend Docker image
        run: docker tag backend-api:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend-api:latest

      - name: Build frontend Docker image
        run: docker build -t frontend-webapp ./webapp
      - name: Tag frontend Docker image
        run: docker tag frontend-webapp:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend-webapp:latest

      # Step 5: Push Docker images to AWS ECR
      - name: Push backend Docker image
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend-api:latest

      - name: Push frontend Docker image
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend-webapp:latest